<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>jp.seraphyware.example</groupId>
        <artifactId>java9moduleexample</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <packaging>jar</packaging>
    <artifactId>java9moduleexampleapp</artifactId>
    <name>java9moduleexampleapp</name>
    <description>Multi Modules Java9 Module example application - app</description>
    <properties>
        <maven.compiler.source>1.9</maven.compiler.source>
        <maven.compiler.target>1.9</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <mainClass>jp.seraphyware.java9example1app.Main</mainClass>
    </properties>
    <dependencies>
        <dependency>
            <groupId>jp.seraphyware.example</groupId>
            <artifactId>java9moduleexamplelib</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <!-- 依存するJARのmodsフォルダへの展開  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/mods</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <!-- 依存jarと同じmodsファイルに出力する -->
                    <outputDirectory>${project.build.directory}/mods</outputDirectory>
                </configuration>
            </plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<!--
							現時点(maven-jar-plugin:3.1.0)では、module-info.javaに対する、module-main-class, module-version属性を
							付与することができないので、java9以降のjarコマンドを直接使用して属性を更新させる。
							https://stackoverflow.com/questions/43671410/how-to-specify-main-class-and-module-version-in-maven-jar-plugin

							これにより、
							java -p target/mods -m javamoduleexample
							としてモジュール名を指定してモジュールのメインクラスを実行することができる。
						-->
						<id>module-info-attributes</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<exec executable="${java.home}/bin/jar" failonerror="true">
									<arg value="--main-class" />
									<arg value="${mainClass}" />
									<arg value="--module-version" />
									<arg value="${project.version}" />
									<arg value="--update" />
									<arg value="--file" />
									<arg value="${project.build.directory}/mods/${project.artifactId}-${project.version}.jar" />
								</exec>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>
</project>